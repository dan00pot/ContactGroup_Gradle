package libs.clients;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.WebDriver;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.reporter.ExtentHtmlReporter;

import io.appium.java_client.AppiumDriver;
import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.android.AndroidKeyCode;
import io.appium.java_client.windows.WindowsDriver;
import libs.common.DriverManagement;
import libs.common.Selenium;
import libs.clients.AndroidClientLocators;

public class AndroidClientKeywords {
	
	final static Logger logger = LogManager.getLogger("androidClient");
	Selenium selenium = new Selenium();
	AndroidClientLocators androidClient = new AndroidClientLocators();
	DriverManagement driverMgnt = new DriverManagement();

	AndroidDriver androidClientDriver;
	
	ExtentHtmlReporter htmlReporter;
	static ExtentReports reports;
	ExtentTest test;
	int timeout = 1000;

	public boolean autoConfigLogin(AndroidDriver androidClientDriver,
			String address, String usr, String pwd) throws Exception {
		boolean n = false;
		try {
			selenium.clickElement(androidClientDriver,	androidClient.FIRST_SCREEN_SETTING_BTN);

			selenium.clickElement(androidClientDriver,	androidClient.FIRST_SCREEN_SETTING_USE_WEB_BTN);

			selenium.clickElement(androidClientDriver,androidClient.FIRST_SCREEN_SETTING_WEB_ADDRESS_TXT);
			selenium.inputText(androidClientDriver,	androidClient.FIRST_SCREEN_SETTING_WEB_ADDRESS_TXT, address);
			selenium.clickElement(androidClientDriver,	androidClient.FIRST_SCREEN_SETTING_USE_WEB_NEXT_BTN);

			selenium.clickElement(androidClientDriver,androidClient.AADS_LOGIN_SCREEN_SETTING_USER_TXT);
			selenium.inputText(androidClientDriver,	androidClient.AADS_LOGIN_SCREEN_SETTING_USER_TXT, usr);

			selenium.clickElement(androidClientDriver,	androidClient.AADS_LOGIN_SCREEN_SETTING_PWD_TXT);
			selenium.inputText(androidClientDriver,	androidClient.AADS_LOGIN_SCREEN_SETTING_PWD_TXT, pwd);
			Thread.sleep(1000);
			selenium.clickElement(androidClientDriver,	androidClient.FIRST_SCREEN_SETTING_USE_WEB_NEXT_BTN);
			androidClientDriver.pressKeyCode(AndroidKeyCode.ENTER);

			for (int i = 0; i < 2; i++) // 4
			{
				selenium.clickElement(androidClientDriver,
						androidClient.AADS_LOGIN_SCREEN_ALLOW_TXT);
				Thread.sleep(1000);
			}
			selenium.clickElement(androidClientDriver,
					androidClient.AADS_LOGIN_SCREEN_OK_BTN);
			selenium.clickElement(androidClientDriver,
					androidClient.AADS_LOGIN_SCREEN_ACCEPT_BTN);
			selenium.clickElement(androidClientDriver,
					androidClient.AADS_LOGIN_SCREEN_ACCEPT_COMFIRM_BTN);
			selenium.clickElement(androidClientDriver,
					androidClient.AADS_LOGIN_SCREEN_SKIP_TUTORIAL_BTN);
			n = true;
		} catch (Exception exception) {
			
		}
		return n;
	}
	
	public void cancelSearch(AndroidDriver androidClientDriver) throws Exception{
		try {
			
			Thread.sleep(3000);
			if (selenium.isElementExisted(androidClientDriver, androidClient.CONTACT_DETAIL_SCREEN_SEARCH_CANCEL_BTN)) {
			selenium.clickElement(androidClientDriver, androidClient.CONTACT_DETAIL_SCREEN_SEARCH_CANCEL_BTN);	
			}
			
		} catch (Exception exception) {
			//throw new Exception("cancelSearch - Failed - Exception occurs: " + exception);
		}
    }
	
	public void clickBackButton(AndroidDriver androidClientDriver) throws Exception{
		try {
			Thread.sleep(3000);
			if (selenium.isElementExisted(androidClientDriver, androidClient.CONTACT_DETAIL_SCREEN_NAVIGATE_UP_BTN	)){
				selenium.clickElement(androidClientDriver, androidClient.CONTACT_DETAIL_SCREEN_NAVIGATE_UP_BTN	);
				}	
			Thread.sleep(3000);
		} catch (Exception exception) { 
			throw new Exception("clickBackButton - Failed - Exception occurs: " + exception);
		}
	
    }
	
	public void clickDoneEnhanceSearch(AndroidDriver androidClientDriver) throws Exception{
		try {
			logger.info("clickDoneEnhanceSearch - starting");
			Thread.sleep(3000);
			if (selenium.isElementExisted(androidClientDriver, androidClient.ENHANCED_SEARCH_DONE_BTN)) {
			selenium.clickElement(androidClientDriver, androidClient.ENHANCED_SEARCH_DONE_BTN);	
			}
			
		} catch (Exception exception) {
			//throw new Exception("cancelSearch - Failed - Exception occurs: " + exception);
		}
    }
	
	
	
	public void Escape(AndroidDriver androidClientDriver) throws Exception{
		try {//
			if(selenium.isElementExisted(androidClientDriver, androidClient.CONTACT_TAB_CONTACTS_EXIST_BUTTON))
				selenium.clickElement(androidClientDriver, androidClient.CONTACT_TAB_CONTACTS_EXIST_BUTTON);
			if(selenium.isElementExisted(androidClientDriver, androidClient.ADD_CONTACT_SCREEN_DONE_BTN)) {
				selenium.clickElement(androidClientDriver, androidClient.ADD_CONTACT_SCREEN_DONE_BTN);
				Thread.sleep(4000);
				if(selenium.isElementExisted(androidClientDriver, androidClient.CONTACT_TAB_CONTACTS_EXIST_BUTTON))
					selenium.clickElement(androidClientDriver, androidClient.CONTACT_TAB_CONTACTS_EXIST_BUTTON);
				if(selenium.isElementExisted(androidClientDriver, androidClient.ADD_CONTACT_SCREEN_DONE_BTN))
					selenium.clickElement(androidClientDriver, androidClient.ADD_CONTACT_SCREEN_CANCEL_BTN	);
					}
			clickBackButton(androidClientDriver);
			cancelSearch(androidClientDriver);
		}
		catch(Exception exception){
		}
	}
	
	public boolean addContactToContactList_T(AndroidDriver androidClientDriver, String user) throws Exception{

		try {

			/*appium.waitUntilElementClickable(androidClientDriver, androidClient.FIRST_SCREEN_MENU_BTN, timeout);
			appium.tapElement(androidClientDriver, androidClient.FIRST_SCREEN_MENU_BTN);*/

			
//			appium.waitUntilElementClickable(androidClientDriver, androidClient.FIRST_SCREEN_MENU_BTN, timeout);
//			appium.tapElement(androidClientDriver, androidClient.FIRST_SCREEN_MENU_BTN);

			selenium.clickElement(androidClientDriver, androidClient.CONTACT_SCREEN_SEARCH_TXT);
			Thread.sleep(3000);
			selenium.inputText(androidClientDriver, androidClient.CONTACT_SCREEN_SEARCH_TXT, user);
			Thread.sleep(10000);
			selenium.clickElement(androidClientDriver, androidClient.CONTACT_SCREEN_LIST_CONTACT_ITEM);
			Thread.sleep(2000);
			selenium.clickElement(androidClientDriver, androidClient.CONTACT_DETAIL_SCREEN_ADD_CONTACT_BTN);
			Thread.sleep(2000);	
		} catch (Exception exception) {
//			driverMgnt.setFailedWinClientDriver((WebDriver) androidClientDriver);
//			logger.error("addContactToContactList - Failed with Exception: " + exception + "...\n");
//			throw new Exception("addContactToContactList - Failed - Exception occurs: " + exception);
			Escape(androidClientDriver);
			cancelSearch(androidClientDriver);
			return false;
		}
		clickBackButton(androidClientDriver);
		cancelSearch(androidClientDriver);
		return true;
    }

	public void settingScreenMainClickOnTab(AndroidDriver androidClientDriver, String tabName) throws Exception{
		
		try {
			selenium.clickElement(androidClientDriver, androidClient.settingScreenTabLocators(tabName));
		} catch (Exception exception) { 
			throw new Exception("settingScreenMainClickOnTab - Failed - Exception occurs: " + exception);
		}
				
    }
	
	public void settingScreenMainSelectOptionInsideTab(AndroidDriver androidClientDriver, String option) throws Exception{
		logger.info("settingScreenMainSelectOptionInsideTab - starting...\n");
		logger.info("option is: " + option + "\n");
		try {
			String currentStatus = selenium.getAttribute(androidClientDriver, androidClient.SETTING_SCREEN_SERVICES_TAB_SERVICE_DETAILS_SWITCH, "checked");
			logger.info("current status is: " + currentStatus + "\n");
			if (currentStatus.toLowerCase().contains("false")) {
				selenium.clickElement(androidClientDriver, androidClient.SETTING_SCREEN_SERVICES_TAB_SERVICE_DETAILS_SWITCH);
			}
			Thread.sleep(2000);
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.settingScreenOptionsInsideTabLocators(option));
			selenium.clickElement(androidClientDriver, androidClient.settingScreenOptionsInsideTabLocators(option));
			Thread.sleep(1000);
		} catch (Exception exception) { 
			//driverMgnt.setFailedWinClientDriver((WebDriver) androidClientDriver);
			logger.error("settingScreenMainSelectOptionInsideTab - Failed with Exception: " + exception + "...\n");
			throw new Exception("settingScreenMainSelectOptionInsideTab - Failed - Exception occurs: " + exception);
		}
		logger.info("settingScreenMainSelectOptionInsideTab - completed...\n");		
	}

	public void settingScreenMainClickDoneButton(AndroidDriver androidClientDriver) throws Exception{
		logger.info("settingScreenMainClickDoneButton - starting...\n");
		try {
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.SETTING_SCREEN_DONE_BTN);
			selenium.clickElement(androidClientDriver, androidClient.SETTING_SCREEN_DONE_BTN);
	
		} catch (Exception exception) { 
			//driverMgnt.setFailedWinClientDriver((WebDriver) androidClientDriver);
			logger.error("settingScreenMainClickDoneButton - Failed with Exception: " + exception + "...\n");
			throw new Exception("settingScreenMainClickDoneButton - Failed - Exception occurs: " + exception);
		}
		logger.info("settingScreenMainClickDoneButton - completed...\n");		
	}

	public void navigateToContactDetailScreen(AndroidDriver androidClientDriver, String user) throws Exception{
		try {
			Thread.sleep(1000);
			selenium.clickElement(androidClientDriver, androidClient.FIRST_SCREEN_MENU_BTN);
			settingScreenMainClickOnTab(androidClientDriver, "Contacts");
			selenium.clickElement(androidClientDriver, androidClient.CONTACT_SCREEN_SEARCH_TXT);
			Thread.sleep(3000);
			selenium.inputText(androidClientDriver, androidClient.CONTACT_SCREEN_SEARCH_TXT, user);
			Thread.sleep(500);
			selenium.clickElement(androidClientDriver, androidClient.CONTACT_SCREEN_LIST_CONTACT_ITEM);
			Thread.sleep(2000);
		} catch (Exception exception) { 
			throw new Exception("navigateToContactDetailScreen - Failed - Exception occurs: " + exception);
		}

		
    }
	
	public void navigateToSettingScreen(AndroidDriver androidClientDriver) throws Exception{
		logger.info("navigateToSettingScreen - starting...\n");
		try {
			if (selenium.isElementExisted(androidClientDriver, androidClient.FIRST_SCREEN_SETTING_BTN)){
				selenium.waitUntilElementClickable(androidClientDriver, androidClient.FIRST_SCREEN_SETTING_BTN);
				selenium.clickElement(androidClientDriver, androidClient.FIRST_SCREEN_SETTING_BTN);
				selenium.waitUntilElementClickable(androidClientDriver, androidClient.FIRST_SCREEN_SETTING_MANUALLY_CONF_BTN);
				selenium.clickElement(androidClientDriver, androidClient.FIRST_SCREEN_SETTING_MANUALLY_CONF_BTN);
				selenium.waitUntilElementClickable(androidClientDriver, androidClient.SETTING_SCREEN_DONE_BTN);
				selenium.clickElement(androidClientDriver, androidClient.SETTING_SCREEN_DONE_BTN);		
			}
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.FIRST_SCREEN_MENU_BTN);
			selenium.clickElement(androidClientDriver, androidClient.FIRST_SCREEN_MENU_BTN);
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.FIRST_SCREEN_MENU_SETTING_BTN);
			selenium.clickElement(androidClientDriver, androidClient.FIRST_SCREEN_MENU_SETTING_BTN);
			Thread.sleep(2000);
		} catch (Exception exception) { 
			//driverMgnt.setFailedWinClientDriver((WebDriver) androidClientDriver);
			logger.error("navigateToSettingScreen - Failed with Exception: " + exception + "...\n");
			throw new Exception("navigateToSettingScreen - Failed - Exception occurs: " + exception);
		}
		logger.info("navigateToSettingScreen - completed...\n");			
	}

	public boolean editExistedContactInfo_T(AndroidDriver androidClientDriver, String user, String fieldname, String value) throws Exception{
		try {
			navigateToContactDetailScreen(androidClientDriver, user);
			selenium.clickElement(androidClientDriver, androidClient.CONTACT_SCREEN_EDIT_CONTACT_BTN);	
			switch (fieldname) {
				case "company":
					selenium.inputText(androidClientDriver, androidClient.EDIT_COMPANY_TXT_FIELD, value);
					break;
				case "last_name":
					selenium.inputText(androidClientDriver, androidClient.EDIT_FIRST_NAME_TXT_FIELD, value);
					break;
				}
			selenium.clickElement(androidClientDriver, androidClient.EDIT_CONTACT_SCREEN_DONE_BTN);	
			Thread.sleep(4000);

			if(!selenium.isElementExisted(androidClientDriver, androidClient.EDIT_CONTACT_SCREEN_DONE_BTN))
			{
			clickBackButton(androidClientDriver);
			cancelSearch(androidClientDriver); 
			return true;
			}

		} catch (Exception exception) {
			Escape(androidClientDriver);
		}
		clickBackButton(androidClientDriver);
		cancelSearch(androidClientDriver);
		return false;
    }
	
	public boolean removeContactInContactList_T(AndroidDriver androidClientDriver, String user) throws Exception{
		try {
			navigateToContactDetailScreen(androidClientDriver, user);
			selenium.clickElement(androidClientDriver, androidClient.CONTACT_DETAIL_SCREEN_REMOVE_CONTACT_BTN);
			Thread.sleep(2000);
			selenium.clickElement(androidClientDriver, androidClient.CONTACT_DETAIL_SCREEN_REMOVE_CONTACT_BTN);
			Thread.sleep(5000);	
			if(!selenium.isElementExisted(androidClientDriver, androidClient.CONTACT_DETAIL_SCREEN_REMOVE_CONTACT_BTN)) {
				cancelSearch(androidClientDriver);
				return true;}
		} catch (Exception exception) { 
			Escape(androidClientDriver);
		}
		return false;
    }
	
	public boolean TestSearchContact(AndroidDriver androidClientDriver, String input, String result) throws Exception{
		boolean s = false;
	
			Thread.sleep(2000);
		
			selenium.clickElement(androidClientDriver, androidClient.CONTACT_SCREEN_SEARCH_TXT);
			Thread.sleep(2000);
			selenium.inputText(androidClientDriver, androidClient.CONTACT_SCREEN_SEARCH_TXT, input);
			Thread.sleep(5000);
			s=selenium.isElementExisted(androidClientDriver, androidClient.CONTACT_SCREN_STRING_MUST_CONTAIN(result));
	
		cancelSearch(androidClientDriver);
		return s;
    }
	
	public boolean autoConfigLogin_T(AndroidDriver androidClientDriver, String address, String usr, String pwd) throws Exception{
		logger.info("autoConfigLogin - starting...\n");
		boolean n = false;
		int s=0;
		while (true) {
			if (s==3) break;
		try {
			Thread.sleep(5000);
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.FIRST_SCREEN_SETTING_BTN);
			selenium.clickElement(androidClientDriver, androidClient.FIRST_SCREEN_SETTING_BTN);
			Thread.sleep(5000);
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.FIRST_SCREEN_SETTING_USE_WEB_BTN);
			selenium.clickElement(androidClientDriver, androidClient.FIRST_SCREEN_SETTING_USE_WEB_BTN);
			Thread.sleep(3000);
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.FIRST_SCREEN_SETTING_WEB_ADDRESS_TXT);
			selenium.clickElement(androidClientDriver, androidClient.FIRST_SCREEN_SETTING_WEB_ADDRESS_TXT);
			selenium.mobileInputText(androidClientDriver, androidClient.FIRST_SCREEN_SETTING_WEB_ADDRESS_TXT, address );
			Thread.sleep(1000);
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.FIRST_SCREEN_SETTING_USE_WEB_NEXT_BTN);
			selenium.clickElement(androidClientDriver, androidClient.FIRST_SCREEN_SETTING_USE_WEB_NEXT_BTN);
			Thread.sleep(8000);
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.AADS_LOGIN_SCREEN_SETTING_USER_TXT);
			selenium.clickElement(androidClientDriver, androidClient.AADS_LOGIN_SCREEN_SETTING_USER_TXT);
			selenium.mobileInputText(androidClientDriver, androidClient.AADS_LOGIN_SCREEN_SETTING_USER_TXT, usr);
			Thread.sleep(3000);
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.AADS_LOGIN_SCREEN_SETTING_PWD_TXT);
			selenium.clickElement(androidClientDriver, androidClient.AADS_LOGIN_SCREEN_SETTING_PWD_TXT);
			selenium.inputText(androidClientDriver, androidClient.AADS_LOGIN_SCREEN_SETTING_PWD_TXT, pwd);
			androidClientDriver.pressKeyCode(AndroidKeyCode.ENTER);
			
			Thread.sleep(3000);
			if(selenium.isElementExisted(androidClientDriver, androidClient.FIRST_SCREEN_SETTING_USE_WEB_NEXT_BTN))
			{
				selenium.clickElement(androidClientDriver, androidClient.FIRST_SCREEN_SETTING_USE_WEB_NEXT_BTN);
			}
			Thread.sleep(9000);
			if(selenium.isElementExisted(androidClientDriver, androidClient.AADS_LOGIN_SCREEN_SETTING_USER_TXT))
			{
				logger.info("autoConfigLogin - Need to login Multimedia Messaging account starting...\n");
				selenium.waitUntilElementClickable(androidClientDriver, androidClient.AADS_LOGIN_SCREEN_SETTING_USER_TXT);
				selenium.clickElement(androidClientDriver, androidClient.AADS_LOGIN_SCREEN_SETTING_USER_TXT);
				selenium.mobileInputText(androidClientDriver, androidClient.AADS_LOGIN_SCREEN_SETTING_USER_TXT, usr);
				Thread.sleep(1000);
				selenium.waitUntilElementClickable(androidClientDriver, androidClient.AADS_LOGIN_SCREEN_SETTING_PWD_TXT);
				selenium.clickElement(androidClientDriver, androidClient.AADS_LOGIN_SCREEN_SETTING_PWD_TXT);
				selenium.inputText(androidClientDriver, androidClient.AADS_LOGIN_SCREEN_SETTING_PWD_TXT, pwd);
				androidClientDriver.pressKeyCode(AndroidKeyCode.ENTER);
				Thread.sleep(1000);
				if(selenium.isElementExisted(androidClientDriver, androidClient.FIRST_SCREEN_SETTING_USE_WEB_NEXT_BTN))
				{
					selenium.clickElement(androidClientDriver, androidClient.FIRST_SCREEN_SETTING_USE_WEB_NEXT_BTN);
				}
				logger.info("autoConfigLogin - Need to login Multimedia Messaging account completed...\n");
				
			}
			Thread.sleep(5000);
			for(int i=0 ; i<2; i++) //4
			{
				selenium.waitUntilElementClickable(androidClientDriver, androidClient.AADS_LOGIN_SCREEN_ALLOW_TXT);
				selenium.clickElement(androidClientDriver, androidClient.AADS_LOGIN_SCREEN_ALLOW_TXT);
				Thread.sleep(1000);
			}
			Thread.sleep(5000);
			
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.AADS_LOGIN_SCREEN_OK_BTN);
			selenium.clickElement(androidClientDriver, androidClient.AADS_LOGIN_SCREEN_OK_BTN);
			Thread.sleep(5000);

			Thread.sleep(5000);
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.AADS_LOGIN_SCREEN_ACCEPT_BTN);
			selenium.clickElement(androidClientDriver, androidClient.AADS_LOGIN_SCREEN_ACCEPT_BTN);
			Thread.sleep(5000);
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.AADS_LOGIN_SCREEN_ACCEPT_COMFIRM_BTN);
			selenium.clickElement(androidClientDriver, androidClient.AADS_LOGIN_SCREEN_ACCEPT_COMFIRM_BTN);
			Thread.sleep(3000);
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.AADS_LOGIN_SCREEN_SKIP_TUTORIAL_BTN);
			if(selenium.isElementExisted(androidClientDriver, androidClient.AADS_LOGIN_SCREEN_SKIP_TUTORIAL_BTN)) {
			selenium.clickElement(androidClientDriver, androidClient.AADS_LOGIN_SCREEN_SKIP_TUTORIAL_BTN);	
			n=true;break;}
		} catch (Exception exception) { 
//			driverMgnt.setFailedWinClientDriver((WebDriver) androidClientDriver);
//			logger.error("autoConfigLogin - Failed with Exception: " + exception + "...\n");
//			throw new Exception("autoConfigLogin - Failed - Exception occurs: " + exception);
			n=false;
			s++;
			androidClientDriver.resetApp();
		}}
		logger.info("autoConfigLogin - completed...\n");	
		return n;
    }
	
	public String getPollingTimer(AndroidDriver androidClientDriver) throws Exception{
		logger.info("getPollingTimer - starting...\n");
		String currentStatus =new String();
		try {
			navigateToSettingScreen(androidClientDriver);
			settingScreenMainClickOnTab(androidClientDriver, "Services");
			settingScreenMainSelectOptionInsideTab(androidClientDriver, "Multimedia Messaging");
			Thread.sleep(1000);
			currentStatus = selenium.getAttribute(androidClientDriver, androidClient.SETTING_SCREEN_SERVICES_TAB_MM_POLLING_INTERVAL_TXT, "text");
			settingScreenMainClickDoneButton(androidClientDriver);
			Thread.sleep(1000);
			if(selenium.isElementExisted(androidClientDriver,androidClient.SETTING_SCREEN_POP_UP_APPLY_CHANGES_BTN ))
			{
				selenium.clickElement(androidClientDriver, androidClient.SETTING_SCREEN_POP_UP_APPLY_CHANGES_BTN);
			}
			Thread.sleep(1000);
			settingScreenMainClickDoneButton(androidClientDriver);
			Thread.sleep(1000);
		} catch (Exception exception) { 
			//driverMgnt.setFailedWinClientDriver((WebDriver) androidClientDriver);
			logger.error("getPollingTimer - Failed with Exception: " + exception + "...\n");
			throw new Exception("getPollingTimer - Failed - Exception occurs: " + exception);
		}
		logger.info("getPollingTimer - completed...\n");
		return currentStatus;
	}

	public String[] getSIPServer(AndroidDriver androidClientDriver) throws Exception{
		logger.info("getSIPServer - starting...\n");
		String[] currentStatus =new String[2];
		try {
			navigateToSettingScreen(androidClientDriver);
			settingScreenMainClickOnTab(androidClientDriver, "Services");
			settingScreenMainSelectOptionInsideTab(androidClientDriver, "Phone Service");
			Thread.sleep(1000);
			currentStatus[0] = selenium.getAttribute(androidClientDriver, androidClient.SETTING_SCREEN_SERVICES_TAB_PHONE_SERVICES_SV_ADDRESS_TXT, "text");
			logger.info("getSIPServer - Server: "+currentStatus[0]);
			currentStatus[1] = selenium.getAttribute(androidClientDriver, androidClient.SETTING_SCREEN_SERVICES_TAB_PHONE_SERVICES_SV_PORT_TX, "text");
			logger.info("getSIPServer - Port: "+currentStatus[1]);
			settingScreenMainClickDoneButton(androidClientDriver);
			Thread.sleep(3000);
			if(selenium.isElementExisted(androidClientDriver,androidClient.SETTING_SCREEN_POP_UP_APPLY_CHANGES_BTN ))
			{
				selenium.clickElement(androidClientDriver, androidClient.SETTING_SCREEN_POP_UP_APPLY_CHANGES_BTN);
			}
			Thread.sleep(1000);
			settingScreenMainClickDoneButton(androidClientDriver);
			Thread.sleep(1000);
		} catch (Exception exception) { 
			//driverMgnt.setFailedWinClientDriver((WebDriver) androidClientDriver);
			logger.error("getSIPServer - Failed with Exception: " + exception + "...\n");
			throw new Exception("getSIPServer - Failed - Exception occurs: " + exception);
		}
		logger.info("getSIPServer - completed...\n");
		return currentStatus;
	}

	public boolean verifyMultimediaMesaging(AndroidDriver androidClientDriver) throws Exception{
		logger.info("verifyMultimediaMesaging - starting...\n");
		boolean s ;
		try {
			navigateToSettingScreen(androidClientDriver);
			settingScreenMainClickOnTab(androidClientDriver, "Services");
			settingScreenMainSelectOptionInsideTab(androidClientDriver, "Multimedia Messaging");
			Thread.sleep(1000);
			String currentStatus = selenium.getAttribute(androidClientDriver, androidClient.SETTING_SCREEN_SERVICES_TAB_MM_ON_OFF_TOGGLE, "checked");
			logger.info("current status is: " + currentStatus + "\n");
			if (currentStatus.toLowerCase().contains("false")) {
				s = false;
			}else s= true;
			settingScreenMainClickDoneButton(androidClientDriver);
			Thread.sleep(1000);
			if(selenium.isElementExisted(androidClientDriver,androidClient.SETTING_SCREEN_POP_UP_APPLY_CHANGES_BTN ))
			{
				selenium.clickElement(androidClientDriver, androidClient.SETTING_SCREEN_POP_UP_APPLY_CHANGES_BTN);
			}
			Thread.sleep(1000);
			settingScreenMainClickDoneButton(androidClientDriver);
			Thread.sleep(1000);
		} catch (Exception exception) { 
			//driverMgnt.setFailedWinClientDriver((WebDriver) androidClientDriver);
			logger.error("verifyMultimediaMesaging - Failed with Exception: " + exception + "...\n");
			throw new Exception("verifyMultimediaMesaging - Failed - Exception occurs: " + exception);
		}
		logger.info("verifyMultimediaMesaging - completed...\n");
		return s;
    }
	
	public boolean verifyPhoneService(AndroidDriver androidClientDriver) throws Exception{
		logger.info("verifyPhoneService - starting...\n");
		boolean s ;
		try {
			navigateToSettingScreen(androidClientDriver);
			settingScreenMainClickOnTab(androidClientDriver, "Services");
			settingScreenMainSelectOptionInsideTab(androidClientDriver, "Phone Service");
			Thread.sleep(1000);
			String currentStatus = selenium.getAttribute(androidClientDriver, androidClient.SETTING_SCREEN_SERVICES_TAB_PHONE_SERVICE_ON_OFF_SWITCH, "checked");
			logger.info("current status is: " + currentStatus + "\n");
			if (currentStatus.toLowerCase().contains("false")) {
				s = false;
			}else s= true;
			settingScreenMainClickDoneButton(androidClientDriver);
			Thread.sleep(1000);
			if(selenium.isElementExisted(androidClientDriver,androidClient.SETTING_SCREEN_POP_UP_APPLY_CHANGES_BTN ))
			{
				selenium.clickElement(androidClientDriver, androidClient.SETTING_SCREEN_POP_UP_APPLY_CHANGES_BTN);
			}
			Thread.sleep(1000);
			settingScreenMainClickDoneButton(androidClientDriver);
			Thread.sleep(1000);
		} catch (Exception exception) { 
			//driverMgnt.setFailedWinClientDriver((WebDriver) androidClientDriver);
			logger.error("verifyPhoneService - Failed with Exception: " + exception + "...\n");
			throw new Exception("verifyPhoneService - Failed - Exception occurs: " + exception);
		}
		logger.info("verifyPhoneService - completed...\n");
		return s;
    }
	
	public boolean verifyDeviceServices(AndroidDriver androidClientDriver) throws Exception{
		logger.info("verifyDeviceServices - starting...\n");
		boolean s ;
		try {
			navigateToSettingScreen(androidClientDriver);
			settingScreenMainClickOnTab(androidClientDriver, "Services");
			settingScreenMainSelectOptionInsideTab(androidClientDriver, "Device Services");
			Thread.sleep(1000);
			String currentStatus = selenium.getAttribute(androidClientDriver, androidClient.SETTING_SCREEN_SERVICES_TAB_SERVICE_DETAILS_SWITCH, "checked");
			logger.info("current status is: " + currentStatus + "\n");
			if (currentStatus.toLowerCase().contains("false")) {
				s = false;
			}else s= true;
			settingScreenMainClickDoneButton(androidClientDriver);
			Thread.sleep(1000);
			if(selenium.isElementExisted(androidClientDriver,androidClient.SETTING_SCREEN_POP_UP_APPLY_CHANGES_BTN ))
			{
				selenium.clickElement(androidClientDriver, androidClient.SETTING_SCREEN_POP_UP_APPLY_CHANGES_BTN);
			}
			Thread.sleep(1000);
			settingScreenMainClickDoneButton(androidClientDriver);
			Thread.sleep(1000);
		} catch (Exception exception) { 
			//driverMgnt.setFailedWinClientDriver((WebDriver) androidClientDriver);
			logger.error("verifyDeviceServices - Failed with Exception: " + exception + "...\n");
			throw new Exception("verifyDeviceServices - Failed - Exception occurs: " + exception);
		}
		logger.info("verifyDeviceServices - completed...\n");
		return s;
    }
	public void verifyEnterpriseContactSearchOnACA (AndroidDriver androidClientDriver, String name, String expected) throws Exception 
	{
		logger.info("verifyEnterpriseContactSearchOnACA - starting...\n");
		
		try {
			boolean flag = false;
			//input text into textfield
			selenium.clickElement(androidClientDriver, androidClient.CONTACT_SCREEN_SEARCH_TXT );
			selenium.inputText(androidClientDriver, androidClient.CONTACT_SCREEN_SEARCH_TXT, name);
			Thread.sleep(10000);
			logger.info("**** verifyEnterprieseContactSearchOnACA - Get number of result ****");
			String s1 = selenium.getAttribute(androidClientDriver, androidClient.SEARCH_CONTACT_ENTERPRISE_CONTACT_TITLE_BAR, "text");
			String number = s1.replaceAll("[^0-9]", "");
			int num = Integer.parseInt(number);
			
			logger.info("verifyEnterprieseContactSearch - Number of result: " + num);
			logger.info("**** verifyEnterprieseContactSearch - Verify search ****");
			logger.info("verifyEnterprieseContactSearch - Expected result: " + expected);
			
			for (int i = 0; i < num; i++) {
				String order = String.valueOf(i + 1);
				// get value in Enterprise if found
				String s2 = selenium.getText(androidClientDriver, androidClient.enterprise_result_by_order(order));
				logger.info("verifyEnterprieseContactSearch - result "+(i+1)+": " + s2);
				if (s2.contains(expected)) {
					logger.info("verifyEnterprieseContactSearch - Existed the expected result - PASSED ");
					flag = true;
					break;
				}
			}
			if (flag == false) {
				logger.error("verifyEnterprieseContactSearch - FAILED - Expected result didn't exist");
				throw new Exception("verifyEnterprieseContactSearch - Expected result didn't exist");
			}
			
			logger.info("verifyEnterprieseContactSearch - PASSED");
			
		} catch (Exception e) {
			
			logger.error("ContactsSearch - Failed with Exception: " + e + "...\n");
			throw new Exception("ContactsUuSearch - Failed - Exception occurs: " + e);
		}
	}
	
	public boolean addLocalContact_T(AndroidDriver androidClientDriver, String firstname,String lastname, String numberphone ,String address) throws Exception{
		logger.info("addLocalContact - starting...\n");
		boolean s = false;
		try {
			Thread.sleep(2000);
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.FIRST_SCREEN_MENU_BTN);
			selenium.clickElement(androidClientDriver, androidClient.FIRST_SCREEN_MENU_BTN);
			settingScreenMainClickOnTab(androidClientDriver, "Contacts");
			Thread.sleep(1000);
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.CONTACT_TAB_SCREEN_ADD_CONTACT_BTN);
			selenium.clickElement(androidClientDriver, androidClient.CONTACT_TAB_SCREEN_ADD_CONTACT_BTN);
			Thread.sleep(1000);
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.CONTACT_TAB_SCREEN_ADD_CONTACT_CONTACT_BTN);
			selenium.clickElement(androidClientDriver, androidClient.CONTACT_TAB_SCREEN_ADD_CONTACT_CONTACT_BTN);
			Thread.sleep(1000);
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.ADD_CONTACT_SCREEN_FIRST_NAME_TXT);
			selenium.inputText(androidClientDriver, androidClient.ADD_CONTACT_SCREEN_FIRST_NAME_TXT, firstname);
			Thread.sleep(1000);
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.ADD_CONTACT_SCREEN_LAST_NAME_TXT);
			selenium.inputText(androidClientDriver, androidClient.ADD_CONTACT_SCREEN_LAST_NAME_TXT, lastname);
			Thread.sleep(1000);
			//androidClientDriver.swipe(0, 0, 200, 200, 200);
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.ADD_CONTACT_SCREEN_NUMBER_PHONE_TXT);
			selenium.inputText(androidClientDriver, androidClient.ADD_CONTACT_SCREEN_NUMBER_PHONE_TXT,numberphone);
			Thread.sleep(1000);
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.ADD_CONTACT_SCREEN_ADDRESS_TXT);
			selenium.inputText(androidClientDriver, androidClient.ADD_CONTACT_SCREEN_ADDRESS_TXT,address);
			Thread.sleep(1000);
			//androidClientDriver.swipe(200, 200, 0, 0, 200);
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.ADD_CONTACT_SCREEN_DONE_BTN);
			selenium.clickElement(androidClientDriver, androidClient.ADD_CONTACT_SCREEN_DONE_BTN);
			Thread.sleep(4000);
			if(!selenium.isElementExisted(androidClientDriver, androidClient.ADD_CONTACT_SCREEN_DONE_BTN)) {
				s=true;
				clickBackButton(androidClientDriver);
				cancelSearch(androidClientDriver);
			}
			else {Escape(androidClientDriver); s=false;}
			
		} catch (Exception exception) { 
			//driverMgnt.setFailedWinClientDriver((WebDriver) androidClientDriver);
			logger.error("addLocalContact - Failed with Exception: " + exception + "...\n");
//			throw new Exception("addLocalContact - Failed - Exception occurs: " + exception);
			Escape(androidClientDriver);
		}
		logger.info("addLocalContact - completed...\n");
		return s;
    }
	
	public boolean verifyContactIsExistedContactList(AndroidDriver androidClientDriver, String user) throws Exception{
		logger.info("verifyContactIsExistedContactList - starting...\n");
		boolean s= false;
		try {
			Thread.sleep(2000);
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.FIRST_SCREEN_MENU_BTN);
			selenium.clickElement(androidClientDriver, androidClient.FIRST_SCREEN_MENU_BTN);
			settingScreenMainClickOnTab(androidClientDriver, "Contacts");
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.CONTACT_TAB_CONTACT_VIEW_OPTON_BUTTON);
//			selenium.clickElement(androidClientDriver, androidClient.CONTACT_TAB_CONTACT_VIEW_OPTON_BUTTON);
//			Thread.sleep(2000);
//			selenium.waitUntilElementClickable(androidClientDriver, androidClient.CONTACT_TAB_CONTACT_EQUINOX_CONTACTS_BUTTON);
//			selenium.clickElement(androidClientDriver, androidClient.CONTACT_TAB_CONTACT_EQUINOX_CONTACTS_BUTTON);
//			Thread.sleep(2000);
			if(selenium.isElementExisted(androidClientDriver, androidClient.contactDetailScreenUserNameLocator(user)))
			{
				s=true;
			}
			else s = false;
		} catch (Exception exception) { 
			//driverMgnt.setFailedWinClientDriver((WebDriver) androidClientDriver);
			logger.error("verifyContactIsExistedContactList - Failed with Exception: " + exception + "...\n");
			throw new Exception("verifyContactIsExistedContactList - Failed - Exception occurs: " + exception);
		}
		logger.info("verifyContactIsExistedContactList - completed...\n");
		return s;
    }
	
	public boolean addLocalContact(AndroidDriver androidClientDriver, String firstname,String lastname, String numberphone ,String address) throws Exception{
		logger.info("addLocalContact - starting...\n");
		boolean s = false;
		try {
			Thread.sleep(2000);
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.FIRST_SCREEN_MENU_BTN);
			selenium.clickElement(androidClientDriver, androidClient.FIRST_SCREEN_MENU_BTN);
			settingScreenMainClickOnTab(androidClientDriver, "Contacts");
			Thread.sleep(1000);
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.CONTACT_TAB_SCREEN_ADD_CONTACT_BTN);
			selenium.clickElement(androidClientDriver, androidClient.CONTACT_TAB_SCREEN_ADD_CONTACT_BTN);
			Thread.sleep(1000);
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.CONTACT_TAB_SCREEN_ADD_CONTACT_CONTACT_BTN);
			selenium.clickElement(androidClientDriver, androidClient.CONTACT_TAB_SCREEN_ADD_CONTACT_CONTACT_BTN);
			Thread.sleep(1000);
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.ADD_CONTACT_SCREEN_FIRST_NAME_TXT);
			selenium.inputText(androidClientDriver, androidClient.ADD_CONTACT_SCREEN_FIRST_NAME_TXT, firstname);
			Thread.sleep(1000);
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.ADD_CONTACT_SCREEN_LAST_NAME_TXT);
			selenium.inputText(androidClientDriver, androidClient.ADD_CONTACT_SCREEN_LAST_NAME_TXT, lastname);
			Thread.sleep(1000);
			//androidClientDriver.swipe(0, 0, 200, 200, 200);
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.ADD_CONTACT_SCREEN_NUMBER_PHONE_TXT);
			selenium.inputText(androidClientDriver, androidClient.ADD_CONTACT_SCREEN_NUMBER_PHONE_TXT,numberphone);
			Thread.sleep(1000);
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.ADD_CONTACT_SCREEN_ADDRESS_TXT);
			selenium.inputText(androidClientDriver, androidClient.ADD_CONTACT_SCREEN_ADDRESS_TXT,address);
			Thread.sleep(1000);
			//androidClientDriver.swipe(200, 200, 0, 0, 200);
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.ADD_CONTACT_SCREEN_DONE_BTN);
			selenium.clickElement(androidClientDriver, androidClient.ADD_CONTACT_SCREEN_DONE_BTN);
			Thread.sleep(10000);
			clickBackButton(androidClientDriver);
			s = true;

		} catch (Exception exception) { 
			//driverMgnt.setFailedWinClientDriver((WebDriver) androidClientDriver);
			logger.error("addLocalContact - Failed with Exception: " + exception + "...\n");
			s = false;
			throw new Exception("addLocalContact - Failed - Exception occurs: " + exception);
			
		}
		logger.info("addLocalContact - completed...\n");
		return s;
    }
	
	public void editExistedContactPhoneNumber(AndroidDriver androidClientDriver, String user, String phonenumber, String value) throws Exception{
		logger.info("editExistedContactPhoneNumber - starting...\n");
		try {
			navigateToContactDetailScreen(androidClientDriver, user);
			Thread.sleep(3000);
			selenium.clickElement(androidClientDriver, androidClient.CONTACT_SCREEN_EDIT_CONTACT_BTN);	
			Thread.sleep(3000);
			selenium.inputText(androidClientDriver, androidClient.EDIT_CONTACT_SCREEN_PHONE_TXT(phonenumber), value);
			selenium.clickElement(androidClientDriver, androidClient.EDIT_CONTACT_SCREEN_DONE_BTN);	
		} catch (Exception exception) { 
			//driverMgnt.setFailedWinClientDriver((WebDriver) androidClientDriver);
			logger.error("editExistedContactPhoneNumber - Failed with Exception: " + exception + "...\n");
			throw new Exception("editExistedContactPhoneNumber - Failed - Exception occurs: " + exception);
		}
		logger.info("editExistedContactPhoneNumber - completed...\n");
    }
	
	public void backFromContactDetailToContactTab(AndroidDriver androidClientDriver) throws Exception{
		logger.info("clickBackButton - starting...\n");
		boolean s = false;
		try {
			Thread.sleep(3000);
			if (selenium.isElementExisted(androidClientDriver, androidClient.HISTORY_DETAILS_SCREEN_BACK_BUTTON)){
				selenium.clickElement(androidClientDriver, androidClient.HISTORY_DETAILS_SCREEN_BACK_BUTTON);
				Thread.sleep(2000);
				selenium.waitUntilElementClickable(androidClientDriver, androidClient.CONVERSATION_DETAILS_SCREEN_ADD_PARTICIPANT_BACK_BTN);
				selenium.clickElement(androidClientDriver, androidClient.CONVERSATION_DETAILS_SCREEN_ADD_PARTICIPANT_BACK_BTN);
				}	
			Thread.sleep(3000);
		} catch (Exception exception) { 
			//driverMgnt.setFailedWinClientDriver((WebDriver) androidClientDriver);
			logger.error("clickBackButton - Failed with Exception: " + exception + "...\n");
			throw new Exception("clickBackButton - Failed - Exception occurs: " + exception);
		}
		logger.info("clickBackButton - completed...\n");
	
    }
	
	public void removeFavoriteContact(AndroidDriver androidClientDriver, String user) throws Exception{
		logger.info("removeFavoriteContact - starting...\n");
		boolean s = false;
		try {
			navigateToContactDetailScreen(androidClientDriver, user);
			Thread.sleep(3000);
			selenium.clickElement(androidClientDriver, androidClient.CONTACT_DETAIL_SCREEN_FAVORITE_CONTACT_BTN);	
			Thread.sleep(3000);
		} catch (Exception exception) { 
			//driverMgnt.setFailedWinClientDriver((WebDriver) androidClientDriver);
			logger.error("removeFavoriteContact - Failed with Exception: " + exception + "...\n");
			throw new Exception("removeFavoriteContact - Failed - Exception occurs: " + exception);
		}
		logger.info("removeFavoriteContact - completed...\n");
	
    }
	
	public boolean verifyUserIsFavoriteContact(AndroidDriver androidClientDriver, String user) throws Exception{
		logger.info("removeFavoriteContact - starting...\n");
		boolean s = false;
		try {
			navigateToFavoriteTab(androidClientDriver);
			s= selenium.isElementExisted(androidClientDriver,androidClient.contactDetailScreenUserNameLocator(user) );
		} catch (Exception exception) { 
			//driverMgnt.setFailedWinClientDriver((WebDriver) androidClientDriver);
			logger.error("removeFavoriteContact - Failed with Exception: " + exception + "...\n");
			throw new Exception("removeFavoriteContact - Failed - Exception occurs: " + exception);
		}
		logger.info("removeFavoriteContact - completed...\n");
		return s;
   }
	
	public void navigateToFavoriteTab(AndroidDriver androidClientDriver) throws Exception{
		logger.info("navigateToMessageScreen - starting...\n");
		try {
			Thread.sleep(4000);
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.FIRST_SCREEN_MENU_BTN);
			selenium.clickElement(androidClientDriver, androidClient.FIRST_SCREEN_MENU_BTN);
			Thread.sleep(2000);
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.firstScreenMenuTabLocators("Favorites"));
			selenium.clickElement(androidClientDriver, androidClient.firstScreenMenuTabLocators("Favorites"));
			Thread.sleep(4000);
		} catch (Exception exception) { 
			//driverMgnt.setFailedWinClientDriver((WebDriver) androidClientDriver);
			logger.error("navigateToMessageScreen - Failed with Exception: " + exception + "...\n");
			throw new Exception("navigateToMessageScreen - Failed - Exception occurs: " + exception);
		}
		logger.info("navigateToMessageScreen - completed...\n");			
    }
	
	public boolean SearchContact(AndroidDriver androidClientDriver, String input, String result) throws Exception{
		logger.info("TestSearchContact - starting...\n");
		boolean s;
		try {
			Thread.sleep(2000);
		
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.CONTACT_SCREEN_SEARCH_TXT);
			selenium.clickElement(androidClientDriver, androidClient.CONTACT_SCREEN_SEARCH_TXT);
			Thread.sleep(2000);
			selenium.inputText(androidClientDriver, androidClient.CONTACT_SCREEN_SEARCH_TXT, input);
			Thread.sleep(12000);
			//selenium.clickElement(androidClientDriver, androidClient.CONTACT_SCREN_STRING_MUST_CONTAIN(result));
			s=selenium.isElementExisted(androidClientDriver, androidClient.CONTACT_SCREN_STRING_MUST_CONTAIN(result));
			
		} catch (Exception exception) { 
			//driverMgnt.setFailedWinClientDriver((WebDriver) androidClientDriver);
			logger.error("TestSearchContact - Failed with Exception: " + exception + "...\n");
			throw new Exception("TestSearchContact - Failed - Exception occurs: " + exception);
		}
		logger.info("TestSearchContact - completed...\n");
		return s;
    }
	
	public boolean addContactfollowingSearch(AndroidDriver androidClientDriver, String user) throws Exception{
		boolean s = false;
		try {
			Thread.sleep(1000);
			/*appium.waitUntilElementClickable(androidClientDriver, androidClient.FIRST_SCREEN_MENU_BTN, timeout);
			appium.tapElement(androidClientDriver, androidClient.FIRST_SCREEN_MENU_BTN);*/

//			selenium.clickElement(androidClientDriver, androidClient.CONTACT_SCREEN_LIST_CONTACT_ITEM);
//			Thread.sleep(2000);
			selenium.clickElement(androidClientDriver, androidClient.CONTACT_SCREN_STRING_MUST_CONTAIN(user));
			Thread.sleep(3000);
			selenium.clickElement(androidClientDriver, androidClient.CONTACT_DETAIL_SCREEN_ADD_CONTACT_BTN);
			Thread.sleep(3000);
			clickBackButton(androidClientDriver);
			cancelSearch(androidClientDriver);
			navigateToContactScreen(androidClientDriver);
			if(selenium.isElementExisted(androidClientDriver, androidClient.contactDetailScreenUserNameLocator(user))){
				logger.info("PASSED"); 
				//test.log(Status.PASS,user + " Existed Contact - PASSED");
				s = true;
			} else{
				logger.error("Contact is not exist: " + user);
				Escape(androidClientDriver);
				//test.log(Status.FAIL,user + " Not Existed Contact - FAILED");
				s =false;
				//throw new Exception("Contact is not exist: " + searchedResultName);
			}
		} catch (Exception exception) {
			driverMgnt.setFailedWinClientDriver((WebDriver) androidClientDriver);
			logger.error("addContactToContactList - Failed with Exception: " + exception + "...\n");
			throw new Exception("addContactToContactList - Failed - Exception occurs: " + exception);
		}
		return s;
    }
	
	public boolean editExistedContactInfo(AndroidDriver androidClientDriver, String user, String fieldname, String value, String lastName) throws Exception{
		try {
			logger.info("editExistedContactInfo - starting");
			navigateToContactDetailScreen(androidClientDriver, user);
			Thread.sleep(2000);
			selenium.clickElement(androidClientDriver, androidClient.CONTACT_SCREEN_EDIT_CONTACT_BTN);	
			switch (fieldname) {
				case "company":
					selenium.inputText(androidClientDriver, androidClient.EDIT_COMPANY_TXT_FIELD, value);
					selenium.clickElement(androidClientDriver, androidClient.EDIT_CONTACT_SCREEN_DONE_BTN);	
					Thread.sleep(4000);

					if(!selenium.isElementExisted(androidClientDriver, androidClient.EDIT_CONTACT_SCREEN_DONE_BTN) && selenium.getText(androidClientDriver,androidClient.CONTACT_DETAILS_COMPANY).contains(value))
					{
					clickBackButton(androidClientDriver);
					cancelSearch(androidClientDriver); 
					return true;
					}
				case "first_name":
					selenium.inputText(androidClientDriver, androidClient.EDIT_FIRST_NAME_TXT_FIELD, value);
					selenium.clickElement(androidClientDriver, androidClient.EDIT_CONTACT_SCREEN_DONE_BTN);	
					Thread.sleep(4000);
					clickBackButton(androidClientDriver);
					cancelSearch(androidClientDriver); 
					String contact = value +" " +lastName;
					if(!selenium.isElementExisted(androidClientDriver, androidClient.EDIT_CONTACT_SCREEN_DONE_BTN) && selenium.isElementExisted(androidClientDriver, androidClient.CONTACT_TAB_USER_NAME(contact)))
					{
					return true;
					}
				}

		} catch (Exception exception) {
			Escape(androidClientDriver);
		}
		clickBackButton(androidClientDriver);
		cancelSearch(androidClientDriver);
		return false;
    }
	
	public boolean removeContactInContactList(AndroidDriver androidClientDriver, String user,String userName) throws Exception{
		try {
			navigateToContactDetailScreen(androidClientDriver, user);
			selenium.clickElement(androidClientDriver, androidClient.CONTACT_DETAIL_SCREEN_REMOVE_CONTACT_BTN);
			selenium.clickElement(androidClientDriver, androidClient.CONTACT_DETAIL_SCREEN_REMOVE_CONTACT_BTN);
			selenium.waitUntilElementVisible(androidClientDriver, androidClient.CONTACT_SCREEN_SEARCH_TXT);
			if(!selenium.isElementExisted(androidClientDriver, androidClient.CONTACT_DETAIL_SCREEN_REMOVE_CONTACT_BTN)) {
				logger.info("removeContactInContactList: Remove button disappear");
				clickBackButton(androidClientDriver);
				cancelSearch(androidClientDriver);
				selenium.waitUntilElementVisible(androidClientDriver, androidClient.CONTACT_SCREEN_SEARCH_TXT);
				if(!selenium.isElementExisted(androidClientDriver, androidClient.contactDetailScreenUserNameLocator(userName))) {
					logger.info("removeContactInContactList: Contact "+userName+" was removed from contact list");
					return true;
				} else
					{
					logger.info("removeContactInContactList - FAILED: Contact "+userName+" still exists in contact list");
					return false;
					}
				}
		} catch (Exception exception) { 
			Escape(androidClientDriver);
			
		}
		return false;
    }
	public void navigateToContactScreen(AndroidDriver androidClientDriver) throws Exception{
		logger.info("navigateToMessageScreen - starting...\n");
		try {
			selenium.clickElement(androidClientDriver, androidClient.FIRST_SCREEN_MENU_BTN);
			selenium.clickElement(androidClientDriver, androidClient.firstScreenMenuTabLocators("Contacts"));
		} catch (Exception exception) {
			logger.error("navigateToMessageScreen - Failed with Exception: " + exception + "...\n");
		}
		logger.info("navigateToMessageScreen - completed...\n");			
    }
	
	public void signin (AndroidDriver androidClientDriver) throws Exception{
		logger.info("signin - starting...\n");
		try {
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.SIGN_IN_BTN);
			selenium.clickElement(androidClientDriver, androidClient.SIGN_IN_BTN);
			Thread.sleep(5000);
		} catch (Exception exception) {
			driverMgnt.setFailedWinClientDriver(androidClientDriver);
			logger.error("signin - Failed with Exception: " + exception + "...\n");
			throw new Exception("signin - Failed - Exception occurs: " + exception);
		}
		logger.info("signin - completed...\n");		
    }
	
	public void signout (AndroidDriver androidClientDriver) throws Exception{
		logger.info("signout - starting...\n");
		try {
			selenium.clickElement(androidClientDriver, androidClient.PROFILE_AVATAR);
			boolean signoutButtonExist = selenium.isElementExisted(androidClientDriver, androidClient.SIGN_OUT_BTN);
			if(!signoutButtonExist){
				logger.info("Need to swipe screen");
				selenium.scrollFromElementToElement(androidClientDriver, androidClient.PREFERENCES, androidClient.LOCAL_USER_AVATAR);
			}
			selenium.clickElement(androidClientDriver, androidClient.SIGN_OUT_BTN);
			Thread.sleep(1000);
		} catch (Exception exception) {
			driverMgnt.setFailedWinClientDriver(androidClientDriver);
			logger.error("signout - Failed with Exception: " + exception + "...\n");
			throw new Exception("signout - Failed - Exception occurs: " + exception);
		}
		logger.info("signout - completed...\n");		
    }
	
	public void clickDropDownEnhanceSearch (AndroidDriver androidClientDriver) throws Exception{
		logger.info("clickDropDownEnhanceSearch - starting...\n");
		try {
			Thread.sleep(1000);
			selenium.clickElement(androidClientDriver, androidClient.ENHANCED_SEARCH_DROP_BTN);
			Thread.sleep(10000);
		} catch (Exception exception) {
			logger.error("clickDropDownEnhanceSearch - Failed with Exception: " + exception + "...\n");
		}
		logger.info("clickDropDownEnhanceSearch - completed...\n");		
    }
	
	public boolean verifyEnhancedSearchContact(AndroidDriver androidClientDriver,String searchName, String searchLocation, String searchDepartment, String expected) throws Exception {
		logger.info("verifyEnhancedSearchContact - starting...\n");
		boolean s = false;
		try {
			
			logger.info("**** verifyEnhancedSearchContact - Get number of result ****");
		//	selenium.waitUntilElementVisible(winClientDriver, windowsClient.ENHANCED_SEARCH_NAME_TXT);
			selenium.inputText(androidClientDriver, androidClient.ENHANCED_SEARCH_NAME_TXT, searchName );
			logger.info("**** Input Name ****");
			Thread.sleep(1000);
			selenium.inputText(androidClientDriver, androidClient.ENHANCED_SEARCH_LOCATION_TXT, searchLocation );
			logger.info("**** Input Location ****");
			Thread.sleep(1000);
			selenium.inputText(androidClientDriver, androidClient.ENHANCED_SEARCH_DEPARTMENT_TXT, searchDepartment );
			logger.info("**** Input Department ****");
			Thread.sleep(1000);
			
			selenium.clickElement(androidClientDriver, androidClient.ENHANCED_SEARCH_BTN);
			Thread.sleep(5000);
			
			//selenium.waitUntilElementVisible(winClientDriver, windowsClient.search_contact_enterprise_result());	
			logger.info("**** verifyEnterprieseContactSearchOnACA - Get number of result ****");
			String s1 = selenium.getAttribute(androidClientDriver, androidClient.SEARCH_CONTACT_ENTERPRISE_CONTACT_TITLE_BAR, "text");
			String number = s1.replaceAll("[^0-9]", "");
			int num = Integer.parseInt(number);
			
			logger.info("verifyEnterprieseContactSearch - Number of result: " + num);
			logger.info("**** verifyEnterprieseContactSearch - Verify search ****");
			logger.info("verifyEnterprieseContactSearch - Expected result: " + expected);
			
			for (int i = 0; i < num; i++) {
				String order = String.valueOf(i + 1);
				// get value in Enterprise if found
				String s2 = selenium.getText(androidClientDriver, androidClient.enterprise_result_by_order(order));
				logger.info("verifyEnterprieseContactSearch - result "+(i+1)+": " + s2);
				if (s2.contains(expected)) {
					logger.info("verifyEnterprieseContactSearch - Existed the expected result - PASSED ");
					s = true;
					break;
				}
			}
			if (s == false) {
				logger.error("verifyEnterprieseContactSearch - FAILED - Expected result didn't exist");
				throw new Exception("verifyEnterprieseContactSearch - Expected result didn't exist");
			}
			
			logger.info("verifyEnterprieseContactSearch - PASSED");
			
		} catch (Exception e) {
			
			logger.error("ContactsSearch - Failed with Exception: " + e + "...\n");
			//throw new Exception("ContactsUuSearch - Failed - Exception occurs: " + e);
		}
		
		logger.info("verifylocalContactSearch - completed...\n");
		return s;	
	}
	
	public boolean removeContactInContactListACA(AndroidDriver androidClientDriver, String user) throws Exception{
		try {
			navigateToContactDetailScreen(androidClientDriver, user);
			selenium.clickElement(androidClientDriver, androidClient.CONTACT_DETAIL_SCREEN_REMOVE_CONTACT_BTN);
			Thread.sleep(2000);
			selenium.clickElement(androidClientDriver, androidClient.CONTACT_DETAIL_SCREEN_REMOVE_CONTACT_BTN);
			Thread.sleep(5000);	
			if(!selenium.isElementExisted(androidClientDriver, androidClient.CONTACT_DETAIL_SCREEN_REMOVE_CONTACT_BTN)) {
				cancelSearch(androidClientDriver);
				return true;}
		} catch (Exception exception) { 
			Escape(androidClientDriver);
		}
		return false;
    }
	
	public void conversationWindowsMakeAudioCall (AndroidDriver androidClientDriver) throws Exception{
		logger.info("conversationWindowsMakeVideoCall - starting...\n");

		try {
			Thread.sleep(2000);
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.CONVERSATION_DETAILS_SCREEN_MAKE_AUDIO_CALL);
			selenium.clickElement(androidClientDriver, androidClient.CONVERSATION_DETAILS_SCREEN_MAKE_AUDIO_CALL);
			Thread.sleep(2000);
			//appium.waitUntilElementClickable(androidClientDriver, androidClient.CONVERSATION_DETAILS_SCREEN_MAKE__CALL_NAME_LIST, timeout);
			//appium.tapElement(androidClientDriver, androidClient.CONVERSATION_DETAILS_SCREEN_MAKE__CALL_NAME_LIST);
		} catch (Exception exception) { 
			driverMgnt.setFailedWinClientDriver((WebDriver) androidClientDriver);
		logger.error("conversationWindowsMakeVideoCall - Failed with Exception: " + exception + "...\n");
		throw new Exception("conversationWindowsMakeVideoCall - Failed - Exception occurs: " + exception);
	}
	logger.info("conversationWindowsMakeVideoCall - completed...\n");		
    }
	
	public void makeCallFromDialpad (AndroidDriver androidClientDriver,String phoneNumber) throws Exception{
		logger.info("makeCallFromDialpad - starting...\n");
		try {
			Thread.sleep(5000);
			selenium.clickElement(androidClientDriver, androidClient.MAIN_SCREEN_DIALPAD);
			selenium.inputText(androidClientDriver, androidClient.DIALPAD_INPUT_NUMBER_TXT, phoneNumber);
			selenium.clickElement(androidClientDriver, androidClient.DIALPAD_CALL_BTN);

		} catch (Exception exception) { driverMgnt.setFailedWinClientDriver((WebDriver) androidClientDriver);
			logger.error("makeCallFromDialpad - Failed with Exception: " + exception + "...\n");
			throw new Exception("makeCallFromDialpad - Failed - Exception occurs: " + exception);
		}
		logger.info("makeCallFromDialpad - completed...\n");	
		
	}
	
	public void navigateToTopofMindScreen(AndroidDriver androidClientDriver) throws Exception{
		logger.info("navigateToMessageScreen - starting...\n");
		try {
			Thread.sleep(2000);
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.FIRST_SCREEN_MENU_BTN);
			selenium.clickElement(androidClientDriver, androidClient.FIRST_SCREEN_MENU_BTN);
			Thread.sleep(5000);
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.firstScreenMenuTabLocators("Top Of Mind"));
			selenium.clickElement(androidClientDriver, androidClient.firstScreenMenuTabLocators("Top Of Mind"));
			Thread.sleep(2000);
		} catch (Exception exception) { driverMgnt.setFailedWinClientDriver((WebDriver) androidClientDriver);
			logger.error("navigateToTopofMindScreen - Failed with Exception: " + exception + "...\n");
			throw new Exception("navigateToTopofMindScreen - Failed - Exception occurs: " + exception);
		}
		logger.info("navigateToTopofMindScreen - completed...\n");			
    }
	
	public boolean verifyContactNameOutgoingCall(AndroidDriver androidClientDriver, String Expected) throws Exception{
		logger.info("verifyContactNameOutgoingCall - starting ...\n");
		boolean flag = false;
		try {
			Thread.sleep(1000);
			String s = selenium.getAttribute(androidClientDriver, androidClient.INCOMING_CALL_NAME, "text");
			if(s.equals(Expected)){
				logger.info("PASSED");
				flag = true;
			} else{
				flag = false;
				logger.error("verifyContactNameOutgoingCall - Failed");
				throw new Exception("verifyContactNameOutgoingCall - Failed");
			}
		} catch (Exception e) {
			logger.error("verifyContactNameOutgoingCall - Failed with Exception: " + e + "...\n");
			throw new Exception("verifyContactNameOutgoingCall - Failed - Exception occurs: " + e);
		}
		return flag;
	}
	
	public void phoneCallMainScreenEndCallButton(AppiumDriver androidClientDriver) throws Exception{
		logger.info("PhoneCallMainScreenEndCallButton - starting...\n");
		try {
			selenium.waitUntilElementClickable(androidClientDriver, androidClient.PHONE_CALL_MAIN_SCREEN_END_CALL_BTN);
			//appium.tapElement(androidClientDriver, androidClient.PHONE_CALL_MAIN_SCREEN_END_CALL_BTN);
			Thread.sleep(1000);
			selenium.clickElement(androidClientDriver, androidClient.PHONE_CALL_MAIN_SCREEN_END_CALL_BTN);
		} catch (Exception exception) { driverMgnt.setFailedWinClientDriver((WebDriver) androidClientDriver);
			logger.error("PhoneCallMainScreenEndCallButton - Failed with Exception: " + exception + "...\n");
			throw new Exception("PhoneCallMainScreenEndCallButton - Failed - Exception occurs: " + exception);
		}
		logger.info("PhoneCallMainScreenEndCallButton - completed...\n");		
    }
	
}